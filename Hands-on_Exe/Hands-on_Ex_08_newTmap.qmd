---
title: "Hands-o Exe 08- Modified codes using the new tmap package"
author: "Dew Stella"
date: "2025-03-12"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---
## Choropleth Mapping with R

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

```


```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```


```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)

```

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

```{r}
## Revised code with tmap version 4.0 

tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY", 
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_layout(frame = TRUE) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```
```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```
```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)

```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY", 
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_layout(frame = TRUE) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
```{r}
tmap_style("white")
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```
```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
## Visualising Geospatial Point Data

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
```

```{r}
list(sgpools) 
```

```{r}
sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       crs= 3414)
```

The tmap view is changed to plot to

```{r}
tmap_mode("plot")
```
```{r}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "red",
           size = 1,
           col = "black",
           lwd = 1)
```
```{r}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "red",
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1)
```
```{r}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1)
```
```{r}
tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1) + 
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```
## Analytical Mapping

```{r}
NGA_wp <- read_rds("data/rds/NGA_wp.rds")

```


```{r}
p1 <- tm_shape(NGA_wp) +
  tm_polygons(col = "wp_functional",
              n = 10,
              style = "equal",
              palette = "Blues",
              border.col = "black",
              lwd = 0.1,
              col_alpha = 1) +
  tm_title("Distribution of functional water point by LGAs") +
  tm_layout(legend.outside = FALSE)

```

```{r}
p2 <- tm_shape(NGA_wp) +
  tm_polygons(col = "total_wp",
              n = 10,
              style = "equal",
              palette = "Blues",
              border.col = "black",
              lwd = 0.1,
              col_alpha = 1) +
  tm_title("Distribution of total water point by LGAs") +
  tm_layout(legend.outside = FALSE)

```




```{r}
tmap_arrange(p2, p1, nrow = 1)
```

```{r}
NGA_wp <- NGA_wp %>%
  mutate(pct_functional = wp_functional/total_wp) %>%
  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)
```

## Extreme Value Maps

```{r}
NGA_wp <- NGA_wp %>%
  drop_na()
```

```{r}
percent <- c(0,.01,.1,.5,.9,.99,1)
var <- NGA_wp["pct_functional"] %>%
  st_set_geometry(NULL)
quantile(var[,1], percent)
```



```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

```{r}
percentmap <- function(vnam, df, legtitle = NA, mtitle = "Percentile Map") {
  percent <- c(0, 0.01, 0.1, 0.5, 0.9, 0.99, 1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  
  tm_shape(df) +
    tm_polygons() +
    tm_shape(df) +
    tm_polygons(col = vnam,
                title = legtitle,
                breaks = bperc,
                palette = "brewer.blues",
                labels = c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%")) +
    tm_title(mtitle) +
    tm_layout(title.position = c("right", "bottom"))
}
```



```{r}
percentmap("total_wp", NGA_wp)
```
```{r}
ggplot(data = NGA_wp,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()
```
```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```


```{r}
var <- get.var("wp_nonfunctional", NGA_wp) 
boxbreaks(var)
```

```{r}
boxmap <- function(vnam, df, 
                   legtitle = NA,
                   mtitle = "Box Map",
                   mult = 1.5) {
  var <- get.var(vnam, df)
  bb <- boxbreaks(var)
  tm <- tm_shape(df) +
    tm_polygons(
      col = vnam,
      fill.scale = tm_scale(
        breaks = bb,
        values = "brewer.blues",
        labels = c(
          "lower outlier", 
          "< 25%", 
          "25% - 50%", 
          "50% - 75%",
          "> 75%", 
          "upper outlier"
        )
      ),
      fill.legend = tm_legend(title = legtitle)
    ) +
    tm_title(mtitle) +
    tm_layout(
      legend.position = c("left", "top")
    )
  return(tm)
}

```

```{r}
tmap_mode("plot")
boxmap("wp_nonfunctional", NGA_wp)
```

