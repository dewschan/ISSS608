---
title: "Take Home Exercise 02"
author: "Dew Stella Chan"
date: "2025-02-23"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

This page document the data visualisation and analysis carried out for th Take-Home Exercise 02.

## 1.0 Scope:

The tasks for this take home exercise are to:

-   comment on the pros and cons of three data visualisations on this [page](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade) and provide sketches of the make-over

-   use appropriate ggplot2 and others packages create the make-over of the three data visualisations commented above

-   analyse the data with either time-series analysis or time-series forecasting methods by compliment the analysis with appropriate data visualisation methods and R packages.

## 2.0 Libraries:

-   The following libraries are used to complete the following exercise:

```{r}
pacman::p_load(tidyverse, readxl,  tsibble, feasts, fable, seasonal, ggplot2, scales, ggiraph, reshape2, stringr,treemap, treemapify, gifski, gapminder,plotly, gganimate)
```

reshape2 â€“\> used to melt the data for stacked bar chart

lubidate is being used

## 3.0 Data sets:

The data sets used for this exercise are the "Merchandise Trade by Region/ Market" and "Merchandise Trade By Commodity Section/ Division" from Singstats which could be download from this [page](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data).

In Section 3, it details basic data preparation steps for the data sets: Merchandise Trade by Region/ Market, and the more specific steps in data process for specific types of data visualization are documented in specified section.

### 3.1 Importing Data sets for Merchandise Trade by Region/ Market

The datasets from "Merchandise Trade by Region/ Market" are imported using the function read_xlsx from readxl package.

```{r}
import_r <-read_xlsx("data/Ex02/MerchandiseTradebyRegion.xlsx", "T1")

export_r <- read_xlsx("data/Ex02/MerchandiseTradebyRegion.xlsx", "T2")

re_export_r <- read_xlsx("data/Ex02/MerchandiseTradebyRegion.xlsx", "T3")

```

### 3.2 Data Preparation Merchandise Trade by Region/ Market:

The following steps were done to transform the datasets for make-over and time series analysis.

The initial attempt was to streamline the data preparation so the transformed dataset could be used for both the mark-over visualisation and time series analysis. However, in the course of the doing the assignment, it was realised that it was not possible, hence the data preparation are split up for the each make over and time series analysis.

### 3.2.1 Data Preparation for Make Over 1.

This section documents down the details of data preparation for make over 1. The steps may not be streamline and there may be seems to have redundant steps, this is part which should be removed. I have kept the codes, for future reference on how the the data could be transformed.

### 3.2.1.1 Data Preparation for import data by market and region

The following section is on the data preparation for import data set from Merchandise Trade by Region/ Market.

```{r}
head(import_r)
```

```{r}
# Ensure 'Data Series' is character type, to make sure that the 'Data Series'could be come row names. 
import_r$`Data Series` <- as.character(import_r$`Data Series`)

# Creating a new data frame with 'Data Series' as row names
import <- import_r %>% column_to_rownames(var = "Data Series")

transposed_import <- as.data.frame(t(import))

```

### 3.2.1.1.1 Transposed_import data set

The transposed data has Year_month as rowname the steps below is the add column so that the usual row name will be in running numbers

After preparing the data set, this will be used to carry out time series analysis in section 5.1

```{r}
# Add the row names as a new column so that a running numbers could be replaced. 
transposed_import <- transposed_import %>% rownames_to_column(var = "Year_Month")

# Set sequential row names
rownames(transposed_import) <- seq_len(nrow(transposed_import ))

```

```{r}
# Convert the 'Year_Month' column to date-time format
transposed_import$`Year_Month` <- parse_date_time(transposed_import$`Year_Month`, orders = "ym")

transposed_import$`Year_Month` <- format(transposed_import$`Year_Month`, "%b %Y")

transposed_import <- transposed_import %>%
  rename(Month_Year = Year_Month, Total_imports = `Total All Markets`)

```

The following steps is to summarize the data to yearly.

```{r}
yearly_import<- transposed_import

yearly_import$Month_Year <- parse_date_time(yearly_import$Month_Year, orders = "my")

# Convert 'Month_Year' to a date format and filter incomplete data, 2003 and 2025 does not have 12 months of data, hence they will not be used.
yearly_import <- yearly_import %>%
  filter(`Month_Year` <= ymd("2024-12-01") & `Month_Year` >= ymd("2004-01-01"))

# Extract the year and add it as a new column
yearly_import$Year <- year(yearly_import$`Month_Year`)

# Summarize the values by year
yearly_import <- yearly_import %>%
  group_by(Year) %>%
  summarise(across(-Month_Year, sum, na.rm = TRUE))

head(yearly_import)

```

The following code chunks is for transforming the data frame to for the use of time-series however it was not being used for time series analysis.

```{r}
#| eval: false
#| include: false
# Identify the columns that are continents and countries
continent_columns <- c("America", "Asia", "Europe", "Oceania", "Africa")
country_columns <- setdiff(names(yearly_import), c("Year", continent_columns))

# Transform data to long format, excluding continent columns
long_data <- yearly_import %>%
  pivot_longer(
    cols = all_of(country_columns),  # Only include country columns
    names_to = "Country",            # New column for country names
    values_to = "Import_Value"       # New column for import values
  )

# Hardcode continent assignments
long_data <- long_data %>%
  mutate(
    Continent = case_when(
      Country %in% c("Antigua_And_Barbuda", "Argentina") ~ "America",
      Country %in% c("China", "Japan") ~ "Asia",
      Country %in% c("France", "Germany") ~ "Europe",
      Country %in% c("Australia") ~ "Oceania",
      Country %in% c("Nigeria", "Kenya") ~ "Africa",
      TRUE ~ NA_character_
    )
  )

```

### 3.2.1.2 Data Preparation for Export Data by market and region

The total export by region and year amount includes both the export data from worksheet "T2"- Export and T3"- re-export.

Te following code check is to select the numeric figures and sum them accordingly if they are they consist of the same dimension and assuming the arrangement of the values are the same.

```{r}
if (all(dim(export_r) == dim(re_export_r))) {
  summed_df <- export_r %>%
    mutate(across(where(is.numeric), ~ . + re_export_r[[cur_column()]]))
  non_numeric_cols <- export_r %>%
    select(where(~!is.numeric(.)))
  
 combined_export <- bind_cols(non_numeric_cols, summed_df %>% select(where(is.numeric)))
  print(combined_export)
} else {
  cat("The data frames do not have the same dimensions and cannot be summed element-wise.\n")
}
```

```{undefined}

```

```{r}
# Ensure 'Data Series' is character type
combined_export$`Data Series` <- as.character(export_r$`Data Series`)

# Creating a new column ith 'Data Series' as row names
combined_export<- combined_export %>% column_to_rownames(var = "Data Series")

# Transpose the data frame. 
transposed_export <- as.data.frame(t(combined_export))

# Add the row names as a new column
transposed_export <- transposed_export  %>% rownames_to_column(var = "Year_Month")

# Set sequential row names in running numbers
rownames(transposed_export ) <- seq_len(nrow(transposed_export))

# Convert the 'Year_Month' column to date-time format
transposed_export$`Year_Month` <- parse_date_time(transposed_export$`Year_Month`, orders = "ym")

# set the format to be the month year
transposed_export$`Year_Month` <- format(transposed_export$`Year_Month`, "%b %Y") 

# rename. 
transposed_export <- transposed_export %>%
  rename(Month_Year = Year_Month, Total_exports = `Total All Markets`)


```

The following code chunk is to rename and prepare for the yearly export data.

```{r}
yearly_export<- transposed_export

yearly_export$Month_Year <- parse_date_time(yearly_export$Month_Year, orders = "my")

# Convert 'Month_Year' to a date format and filter incomplete data, 2003 and 2025 does not have 12 months of data, hence they will not be used.
yearly_export <- yearly_export %>%
  filter(`Month_Year` <= ymd("2024-12-01") & `Month_Year` >= ymd("2004-01-01"))

# Extract the year and add it as a new column
yearly_export$Year <- year(yearly_export$`Month_Year`)

# Summarize the values by year and remove the month_year column. 
yearly_export <- yearly_export %>%
  group_by(Year) %>%
  summarise(across(-Month_Year, sum, na.rm = TRUE))

```

### 3.2.1.3 Preparation for Total Merchandise Trade data frame

```{r}
# Extract the 'Total_imports' column
total_imports_summary <- yearly_import %>% select(Year, Total_imports)


# combining total import and export column, they are rounded and convert to billions. 
combined_summary <- yearly_export %>% 
  select(Year, Total_exports) %>% 
  inner_join(total_imports_summary, by = "Year") %>%
  mutate(
    Total_imports_B = round(Total_imports / 1000, 2),
    Total_exports_B = round(Total_exports / 1000, 2)
  ) %>%
  select(Year, Total_imports_B, Total_exports_B)

```

The following code is to calculate year on year % change.

```{r}

# Add a 'Total Trade' column to the combined summary
combined_summary <- combined_summary %>%
  mutate(Total_Trade = Total_imports_B + Total_exports_B)


#Calculate the YoY percentage change for 'Total_imports', 'Total_exports', and 'Total Trade'
combined_summary <- combined_summary %>%
  arrange(Year) %>%
  mutate(
    YoY_imports_change = round((Total_imports_B / lag(Total_imports_B) - 1) * 100, 2),
    YoY_exports_change = round((Total_exports_B / lag(Total_exports_B) - 1) * 100, 2),
    YoY_trade_change = round((Total_Trade / lag(Total_Trade) - 1) * 100, 2)
  )


```

### 3.3.Data preparation for the Merchandise Trade by commodity

The following codes are to prepare for the data set for plotting the tree map for the trade by commodity.

```{r}
commodity <-read_xlsx("data/Ex02/MechandiseTradebycommodity.xlsx", "T1")

filtered_commodities <- commodity %>%
  filter(!(Data_Series %in% c("Oil", "Petroleum", "Oil Bunkers")))
```

```{r}
# Add the Trade_Type column based on row numbers
filtered_commodities <- filtered_commodities %>%
  mutate(Trade_Type = case_when(
    row_number() %in% 1 :11 ~ "Total_Trade",  # Adjust the row numbers and trade types as needed
    row_number() %in% 12:22 ~ "Total_Import",
    row_number() %in% 23:33~ "Total_Export",
    row_number() %in% 34:44~ "Total_Domestic_Exports",
    row_number() %in% 45:55~ "Total_Re_exports",
    TRUE ~ "Other"
  )) %>%
  select(Trade_Type, everything())


```

```{r}
filtered_commodities <- filtered_commodities %>%
  select(-starts_with("19"), -starts_with("2000"), -starts_with("2001"), -starts_with("2002"), -starts_with("2003"))

```

```{r}

# Pivot the data to a longer format
filtered_commodities_long <- filtered_commodities %>%
  pivot_longer(
    cols = starts_with("20"),  # Select columns that start with "202"
    names_to = "Month_Year",
    values_to = "Value"
  )


```

```{r}
# Convert the 'Year_Month' column to date-time format
filtered_commodities_long$Month_Year <- parse_date_time(filtered_commodities_long$Month_Year, orders = "ym")

filtered_commodities_long$Month_Year <- format(filtered_commodities_long$Month_Year, "%b %Y")

```

```{r}

filtered_commodities_long$Month_Year <- parse_date_time(filtered_commodities_long$Month_Year, orders = "my")

# Extract the year and add it as a new column
filtered_commodities_long$Year <- year(filtered_commodities_long$`Month_Year`)

# Summarize the values by year
filtered_commodities_long<- filtered_commodities_long%>%
  group_by(Year, Trade_Type, Data_Series) %>%
  summarise(across(-Month_Year, sum, na.rm = TRUE))


head(filtered_commodities_long)
```

## 4.0 Make Over of Visualization

The first task of this assignment is to make over of the existing graphical representation.

### 4.1 Make-over 1:

::: callout-note
**Pros:**

-   The graphic looks captivating and it draws the attention of the viewer

-   It clearly show the proportion import and export in the past 5 years.

**Cons:**

-   It is difficult to see the rate of change in total trade across the years with % increase indicated at the end of the page.

-   While the graph shows the the amount in trade across the year it is difficult to viisually see the total change across the years. For example there as been increase in total trade from 2020 to 2022, and there is a dip in 2023 and recover to back to amount which is slightly lower than 2024.

-   while colourful chart is attention grabbing, and however it makes it visually difficult to compare across the years and it may dilute the key message the graph to be delivered.
:::

![](images/clipboard-3391151904.png)

#### Creation of tool tips

The following codes are to create the tool tips to plot the chart.

As mentioned in section 3 in the data preparation, the data processing will have to be made to further prepare the data fotr the make over. the following code uses the melt () function to create the data required for plotting of the stack plot chart.

```{r}
combined_summary_melt <- melt(combined_summary, id.vars = "Year", measure.vars = c("Total_imports_B", "Total_exports_B"))
combined_summary_melt$tooltip <- c(paste0(combined_summary_melt$Year," ," ,combined_summary_melt$value, "B"))

combined_summary$tooltip <- c(paste0(combined_summary$Year," ," ,combined_summary$YoY_trade_change, "%"))
```

```{r}

p1 <- ggplot() +
  geom_bar_interactive(data = combined_summary_melt, aes(x = Year, y = value, fill = variable, tooltip = tooltip), stat = "identity") +
  scale_fill_manual(values = c("Total_imports_B" = "skyblue", "Total_exports_B" = "orange"), name = "Trade Type") +
  labs(
    title = "Stacked Bar Chart of Import and Export from 2004 to 2024",
    x = "Year",
    y = "Total Value in Billions",
    fill = "Trade Types"
  ) +
  theme_minimal() +
  theme(
    axis.title.y = element_text(vjust = 1.5)
  )

girafe(
  ggobj = p1,
  width_svg = 8,
  height_svg = 8 * 0.618
)
```

::: callout-note
The interactive chart above shows the export and import amount from 2004 from 2024. with the tooltip shows the total trade number across the years.

In the chart above, one could easily see the past 10 years trend which the total trade amount has increased since 2020 post-Convid. The mouse over tool tips will highlight the amount in the export and import of the particular year.

Although in 2023, there was a dip in total trade amount in 2020

To show the year on year percentage change, a 2nd interactive plot were plotted to visualize this. Similar to the first plot this plot uses the interactive tool tips to let viewer to mouse over to see the data points.

The advantage of doing two separate plots is that different dimensions of the percentage change could be visualized. In the interactive line chart, it has the percentage of in year on year percentage change for Import, Export and Total Trade.
:::

```{r}
# Line chart for YoY percentage changes
p2<- ggplot() +
  geom_line_interactive(data = combined_summary, aes(x = Year, y = YoY_imports_change, group = 1, color = "YoY Imports Change", tooltip = tooltip), size = 1) +
  geom_line_interactive(data = combined_summary, aes(x = Year, y = YoY_exports_change, group = 1, color = "YoY Exports Change", tooltip = tooltip), size = 1) +
  geom_line_interactive(data = combined_summary, aes(x = Year, y = YoY_trade_change, group = 1, color = "YoY Trade Change", tooltip = tooltip), size = 1) +
  geom_point_interactive(data = combined_summary, aes(x = Year, y = YoY_imports_change, color = "YoY Imports Change", tooltip = tooltip), size = 2) +
  geom_point_interactive(data = combined_summary, aes(x = Year, y = YoY_exports_change, color = "YoY Exports Change", tooltip = tooltip), size = 2) +
  geom_point_interactive(data = combined_summary, aes(x = Year, y = YoY_trade_change, color = "YoY Trade Change", tooltip = tooltip), size = 2) +
  scale_color_manual(values = c("YoY Imports Change" = "blue", "YoY Exports Change" = "green", "YoY Trade Change" = "red"), name = "Percentage Change") +
  labs(
    title = "Year-over-Year Percentage Changes in Imports, Exports, and Total Trade",
    x = "Year",
    y = "Percentage Change"
  ) +
  theme_minimal() +
  theme(
    axis.title.y = element_text(vjust = 1.5) 
  )


girafe(
  ggobj = p2,
  width_svg = 8,
  height_svg = 8 * 0.618
)
```

### 4.2 Makeover 2: Bubble plots with the top 10 trading partners

![](images/clipboard-3208648104.png)

::: callout-note
Pros:

-   The above bubble chart shows the export and import of the major trading partners clearly.

Cos:

-   The above plot is stagnant, it does not show how the trend of the major trading power over the years.
:::

### 4.2.1 Data preparation for bubble plot make over

The following code chucks are to prepare the data set required for the plotting of bubble plot.

```{r}
# Remove Regional Data 
yearly_import_long <- yearly_import %>%
  select(-c(Total_imports, America, Asia, Europe, Oceania, Africa)) %>%
  pivot_longer(
    cols = -Year,
    names_to = "Country",
    values_to = "Import"
  )
```

```{r}
# Remove Regional Data 
yearly_export_long <- yearly_export %>%
  select(-c(Total_exports, America, Asia, Europe, Oceania, Africa)) %>%
  pivot_longer(
    cols = -Year,
    names_to = "Country",
    values_to = "Export"
  )
```

```{r}
# Remove Regional Data and to select the top 10 trading partners
yearly_trade_long <- yearly_import_long %>%
  inner_join(yearly_export_long, by = c("Year", "Country")) %>%
  mutate(Trade_Balance = Import - Export,
         Total_Trade = Import + Export)%>%
  group_by(Year) %>% # group the total trade by year to identify the top 10 major partners. 
  top_n(10, Total_Trade) %>% 
  ungroup()

```

### 4.2.2 Bubble Plots

::: callout-note
To improve on the visualization, animated and interactive bubble plots are plotted.

The first plot is the animated bubble plots showing the transition across time of the top 10 major trading partners. This will allow the viewers to view the trend over time.

The second plot is the bubble plot where the viewer could use the bar to view the transition of the trade between the major partners in the past 10 years at their pace, pausing as and when they want.
:::

The code below specified the colours of the each country codes.

```{r}
country_colors <- c(
  "Taiwan" = "#FF6B6B",
  "United States" = "#008080",
  "Germany" = "#B0C4DE",
  "Malaysia" = "#C7F464",
  "China" = "#4ECDC4",
  "Korea, Rep of" = "#C44D58",
  "Japan" = "#FFCC5C",
  "Hong Kong" = "#8A2BE2",
  "Indonesia" = "#556270",
  "Thailand" = "#6A4A3C"
)
```

```{r}

ggplot(yearly_trade_long, aes(x = Export, y = Import, 
                      size = Total_Trade,, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = TRUE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = 'Total Export', 
       y = 'Total Import') +
  transition_time(Year) +       
  ease_aes('linear') 

```

```{r}
gg <- ggplot(yearly_trade_long, 
       aes(x = Import, 
           y = Export, 
           size = Total_Trade, 
           colour = Country)) +
  geom_point(aes(size = Total_Trade,
                 frame = Year), alpha = 0.7, 
             show.legend = FALSE)+
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = 'Export', y = 'Import')


ggplotly (gg)
```

### 4.3 Make-over 3:

::: callout-note
**Pros**:

-   The infograhpics icons facilitate the users' understanding the kind of goods or items in each commodity section is about.

-   The trade balance of each of the commodities could be estimated, even though visually is not very clear.

-   Uniform colours are being used for exports and imports across commodity which allow

**Cos:**

-   Similar to the 1st chart, it is not very clear on which commodity has a biggest proportion in total trade in dollars.
-   It doesn't the proportion of different types of export which are being catorgised to Re-export and Domestic Export.
:::

![](images/clipboard-1458067606.png)

### 4.3.1 Tree maps

::: callout-note
The codes chunk below is to plot the tree map the trade amount by commodities

While tree map is typically used to show hierarchical relationship, for this use case, we are using it to show the proportion of commodities by trade types which is namely total amount for domestic exports, total amount for re-export/

To explore the different relationships both the long data and wide data sets were used to plot two tree maps.

The first tree map in section 4.3.1.1, was plotted using the wider data set. It does not have hierarchical relationship. It solely shows the proportion of total trade by across different commodities.

The second tree map in section 4.3.2.2, was plotted using long data set. It shows proper tree map showing the different proportion of each trade types for each of the commodities.

At one quick glance of the 2nd tree map in section 4.3.2.2, viewers will be able to identify that the largest trade is in machinery and transport equipment with good trade balance between import and export amount. Singapore being an international trading hub and land scarce to cater for heavy industrial on manufacturing of Machinery and Transport Equipment, the majority of the export equipment are in re-export rather than domestic export.
:::

#### 4.3.1.1 Tree Map Using The Wider Data

```{r}
filtered_commodities_wider <- filtered_commodities_long%>%
  pivot_wider(
    names_from = Trade_Type,
    values_from = Value
  )
```

```{r}
filtered_commodities_wider <- filter(filtered_commodities_wider, 
                                         Year == 2024, 
                                         Data_Series != "Non-Oil", 
                                         Data_Series != "Total Domestic Exports, (At Current Prices)", 
                                         Data_Series != "Total Merchandise Imports, (At Current Prices)", 
                                         Data_Series != "Total Merchandise Exports, (At Current Prices)", 
                                         Data_Series != "Total Re-Exports, (At Current Prices)", 
                                         Data_Series != "Total Merchandise Trade, (At Current Prices)")
```

```{r}
head(filtered_commodities_wider)
```

```{r}
# Plot the treemap
treemap(filtered_commodities_wider,
        index = c("Data_Series", "Total_Trade"),
        vSize = "Total_Trade",
        vColor = "Data_Series",
        title = "2024 No Oil Commodities by Total Trade Amount",
        title.legend = "A")
```

#### 4.3.1.1 Tree Map Using The Longer Data

```{r}
#| fig-height: 14
#| fig-width: 14

filtered_commodities_longer_2024<- filter(filtered_commodities_long, 
                                         Year == 2024, 
                                         Data_Series != "Non-Oil", 
                                         Data_Series != "Total Domestic Exports, (At Current Prices)", 
                                         Data_Series != "Total Merchandise Imports, (At Current Prices)", 
                                         Data_Series != "Total Merchandise Exports, (At Current Prices)", 
                                         Data_Series != "Total Re-Exports, (At Current Prices)", 
                                         Data_Series != "Total Merchandise Trade, (At Current Prices)", 
                                         Trade_Type != "Total_Trade",
                                         Trade_Type != "Total_Export")

treemap(filtered_commodities_longer_2024,
        index = c("Data_Series", "Trade_Type"),
        vSize = "Value",
        vColor = "Trade_Type",
        title = "A",
        title.legend = "A")
```

## 5.0 Time Series Analysis

This section is to do time series analysis using the import data.

We will focus the analysis on the top 10 trading partners derived in section 4.2 when plotting the bubble plot.

### 5.1 Time Series Data Preparation

```{r}
top10 <- c("Month_Year","Taiwan", "United States", "Germany", "Malaysia", "China", "Korea, Rep of", 
           "Japan", "Hong Kong", "Indonesia", "Thailand")

existing_columns <- top10[top10 %in% colnames(transposed_import)]

transposed_import_1 <- transposed_import[existing_columns]
```

```{r}
ts_import <-transposed_import_1

ts_import$Month_Year <- parse_date_time(ts_import $Month_Year, orders = "my")

```

```{r}
ts_import_ts <- ts(ts_import)       
head(ts_import_ts)
```

```{r}
ts_tsibble <- ts_import %>%
  mutate(Month = yearmonth(`Month_Year`)) %>%
  as_tsibble(index = `Month`)
```

### 5.2 Visualizing time series

```{r}
ts_longer <- ts_import%>%
  pivot_longer(cols = c(2:10),
               names_to = "Country",
               values_to = "Imports")
```

```{r}
ts_longer %>%
  filter(Country == "United States") %>%
  ggplot(aes(x = `Month_Year`, 
             y = Imports))+
  geom_line(size = 0.5)
```

```{r}
tsibble_longer <- ts_tsibble %>%
  pivot_longer(cols = c(2:10),
               names_to = "Country",
               values_to = "Imports")

```

```{r}
#| fig-height: 10
#| fig-width: 12
ggplot(data = ts_longer, 
       aes(x = `Month_Year`, 
           y = Imports,
           color = Country))+
  geom_line(size = 0.5) +
  theme(legend.position = "bottom", 
        legend.box.spacing = unit(0.5, "cm"))
```

```{r}
ggplot(data = ts_longer, 
       aes(x = `Month_Year`, 
           y = Imports))+
  geom_line(size = 0.5) +
  facet_wrap(~ Country,
             ncol = 3,
             scales = "free_y") +
  theme_bw()
```

### **5.3 Visual Analysis of Time-series Data**

```{r}
tsibble_longer <- ts_tsibble %>%
  pivot_longer(cols = c(2:10),
               names_to = "Country",
               values_to = "Imports")
```

```{r}
#| fig-height: 18
#| fig-width: 14
tsibble_longer %>%
  filter(Country == "Thailand" |
         Country == "Malaysia" |
         Country == "Indonesia" |
         Country == "Taiwan"|
         Country == "China") %>% 
  gg_season(Imports)

```

::: callout-note
Based on the visualisation of the top 10 countries, it was observed, while there has been significant increase in the import from China, United States and Germany, it seems that there are no clear signs of cycles across the months, hence we will focus our analysis on our nearest neighbours in trading.

We will focus on the analysis on Singapore's nearest neighbours Malaysia and Thailand, given there is no obvious cycle in imports from the rest of the countries.
:::

```{r}
tsibble_longer %>%
  filter(Country == "Thailand" |
         Country == "Malaysia") %>% 
  autoplot(Imports) + 
  facet_grid(Country ~ ., scales = "free_y")

```

```{r}
tsibble_longer %>%
  filter(Country == "Thailand" |
         Country == "Malaysia") %>% 
  gg_subseries(Imports)
```

::: callout-note
It is interesting to observe that for both countries, the import of goods to Singapore is quite stable throughout the year. This is interesting as Singapore imports its food resources from theses countries, it would have expected to have some seasonality to the import of food sources leading to spike in a certain months due to festival seasons or harvests.
:::

### **5.4 Time series decomposition**

```{r}
tsibble_longer %>%
   filter(Country == "Thailand" |
         Country == "Malaysia") %>% 
  ACF(Imports) %>% 
  autoplot()
```

```{r}
tsibble_longer %>%
 filter(Country == "Thailand" |
         Country == "Malaysia") %>% 
  PACF(Imports) %>%
  autoplot()
```

::: callout-note
Base on the data, it was observed that there are significant results at lag before 6 months. so there was some seasonality.
:::

```{r}
tsibble_longer %>% 
  filter(Country == "Thailand") %>%
  gg_tsdisplay(Imports)

```

```{r}
tsibble_longer %>% 
  filter(Country == "Malaysia") %>%
  gg_tsdisplay(Imports)
```

### **5.5 Visual STL Diagnostics**

Since based on the time series decomposition, there are some seasonality which is significant in both countries, we will carry out further analysis for using import data from Malaysia using STL method.

We will hold out the hold the last 12 months of the data for testing while the rest for training.

```{r}
Total_Import_TS <- tsibble_longer %>%
  filter(Country == "Malaysia") %>% 
  mutate(Type = if_else(
    `Month_Year` >= "2024-01-01", 
    "Hold-out", "Training"))
```

```{r}
Total_Import_train <- Total_Import_TS %>%
  filter(`Month_Year` < "2024-01-01")
```

```{r}
Total_Import_train %>%
  model(stl = STL(Imports)) %>%
  components() %>%
  autoplot()
```

### **5.6 Visual Forecasting**



```{r}
fit_ses <- Total_Import_train %>%
  model(ETS(Imports ~ error("A") 
            + trend("N") 
            + season("N")))
fit_ses
```

```{r}
gg_tsresiduals(fit_ses)
```

```{r}
fit_ses %>%
  report()
```

```{r}
Total_Import_H <- Total_Import_train %>%
  model(`Holt's method` = 
          ETS(Imports ~ error("A") +
                trend("A") + 
                season("N")))
Total_Import_H %>% report()
```

```{r}
gg_tsresiduals(Total_Import_H)
```

```{r}
Total_Import_WH <- Total_Import_train %>%
  model(
    Additive = ETS(Imports ~ error("A") 
                   + trend("A") 
                   + season("A")),
    Multiplicative = ETS(Imports ~ error("M") 
                         + trend("A") 
                         + season("M"))
    )

Total_Import_WH %>% report()
```

```{r}
fit_ETS <- Total_Import_train %>%
  model(`SES` = ETS(Imports ~ error("A") + 
                      trend("N") + 
                      season("N")),
        `Holt`= ETS(Imports ~ error("A") +
                      trend("A") +
                      season("N")),
        `damped Holt` = 
          ETS(Imports ~ error("A") +
                trend("Ad") + 
                season("N")),
        `WH_A` = ETS(
          Imports ~ error("A") + 
            trend("A") + 
            season("A")),
        `WH_M` = ETS(Imports ~ error("M") 
                         + trend("A") 
                         + season("M"))
  )
```

```{r}
fit_ETS %>%
  tidy()
```

```{r}
fit_ETS %>% 
  report()
```

### 5. 7 Forecasting Future values

```{r}
fit_ETS %>%
  forecast(h = "12 months") %>%
  autoplot(Total_Import_TS, 
           level = NULL)
```

```{r}
fit_autoETS <- Total_Import_train%>%
  model(ETS(Imports))
fit_autoETS %>% report()
```

```{r}
fit_autoETS %>%
  forecast(h = "12 months") %>%
  autoplot(Total_Import_train)
```

```{r}
fc_autoETS <- fit_autoETS %>%
  forecast(h = "12 months")

Total_Import_TS %>%
  ggplot(aes(x=`Month`, 
             y=Imports)) +
  autolayer(fc_autoETS, 
            alpha = 0.6) +
  geom_line(aes(
    color = Type), 
    alpha = 0.8) + 
  geom_line(aes(
    y = .mean, 
    colour = "Forecast"), 
    data = fc_autoETS) +
  geom_line(aes(
    y = .fitted, 
    colour = "Fitted"), 
    data = augment(fit_autoETS))
```

**5.8 Conclusion**

::: callout-note
The use of ETS models: fable method doesn't yield good results, the range of both 90% and 80% levels are very wide range. The forecast values are quite far from the hold out period. Due to the time limit of the assignment, other methods were not explored further to better analyse the requirements.
:::
