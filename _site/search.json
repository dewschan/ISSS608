[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 -Visual Analytics and Applications Course Website",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications\nIn this website, you will find my coursework prepared for this course.\nThe reference materials used in this course are found in Prof Kam Tin Seong’s course Webpage.\nhttps://isss608-ay2024-25jan.netlify.app/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my learning journey for ISSS608 Visual Analytics and Applications.\nIn this website, you will find my coursework prepared for this course.\nThe reference materials used in this course are found in Prof Kam Tin Seong’s course Webpage.\nhttps://isss608-ay2024-25jan.netlify.app/"
  },
  {
    "objectID": "index.html#words-of-encouragment-to-self",
    "href": "index.html#words-of-encouragment-to-self",
    "title": "ISSS608 -Visual Analytics and Applications Course Website",
    "section": "Words of encouragment to self",
    "text": "Words of encouragment to self"
  },
  {
    "objectID": "index.html#words-of-encouragement-to-self",
    "href": "index.html#words-of-encouragement-to-self",
    "title": "ISSS608 -Visual Analytics and Applications Course Website",
    "section": "Words of encouragement to self",
    "text": "Words of encouragement to self"
  },
  {
    "objectID": "Hands-on_Exe/Hands-On_Ex_00.html",
    "href": "Hands-on_Exe/Hands-On_Ex_00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Load tidyverse into r ennvironment by using the code chuck below.\n\npacman::p_load(tidyverse, psych)\n\nReading “read_csv” to create tibble dataframe"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_00/Hands-On_Ex_00.html",
    "href": "Hands-on_Exe/Hands-on_Ex_00/Hands-On_Ex_00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Getting Started\nLoad tidyverse into r ennvironment by using the code chuck below.\n\npacman::p_load(tidyverse, psych)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-On_Ex_00.html#getting-started",
    "href": "Hands-on_Exe/Hands-On_Ex_00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Load tidyverse into r ennvironment by using the code chuck below.\n\npacman::p_load(tidyverse, psych)\n\nReading “read_csv” to create tibble dataframe"
  },
  {
    "objectID": "Hands-on_Exe/Hands-On_Ex_00.html#importing-data",
    "href": "Hands-on_Exe/Hands-On_Ex_00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing data",
    "text": "Importing data\n\nrealis_2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\nPivoting data\n\npopdata_fat&lt;-read_csv(\"data/PopData2019_fat.csv\")\n\n\npopdata_long &lt;- popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\nwrite_rds(popdata_long, \"data/rds/popdata_long.rds\")\n\n\nrealis2019_selected &lt;- realis_2019 %&gt;%\n  select(`Project Name`,\n  `Transacted Price ($)`,\n  `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 3\n   `Project Name`           `Transacted Price ($)` `Property Type`    \n   &lt;chr&gt;                                     &lt;dbl&gt; &lt;chr&gt;              \n 1 PEIRCE VIEW                              840000 Condominium        \n 2 FLORIDA PARK                            3040000 Semi-Detached House\n 3 BULLION PARK                             860000 Condominium        \n 4 CASTLE GREEN                            1000000 Condominium        \n 5 HAPPY ESTATE                            7000000 Semi-Detached House\n 6 TEACHER'S HOUSING ESTATE                2880000 Terrace House      \n 7 THE PANORAMA                            1510000 Condominium        \n 8 THE PANORAMA                             710000 Condominium        \n 9 CHIP THYE GARDEN                        2800000 Terrace House      \n10 TEACHER'S HOUSING ESTATE                2300000 Terrace House      \n# ℹ 19,505 more rows\n\n\n\nrealis_2019_filtered &lt;- realis2019_selected %&gt;%\n  filter('Property Type'== \"Condominium\"|\n  'Property Type' == \"Apartment\") %&gt;% \n  filter('Type of Sales'== \"New Sales\") %&gt;%\n  filter('Unit Prfice ($ psm)'&lt;= 13000)\n\n\n\nPutting them together\n\nrealis_2019_filtered &lt;- realis_2019 %&gt;%\n  select(`Project Name`,\n  `Transacted Price ($)`,\n  `Property Type`) %&gt;%\n  filter('Property Type'== \"Condominium\"|\n  'Property Type' == \"Apartment\") %&gt;% \n  filter('Type of Sales'== \"New Sales\") %&gt;%\n  filter('Unit Prfice ($ psm)'&lt;= 13000)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_00.html",
    "href": "Hands-on_Exe/Hands-on_Ex_00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Load tidyverse into r environment by using the code chuck below.\n\npacman::p_load(tidyverse, psych)\n\nReading “read_csv” to create tibble dataframe"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_00.html#getting-started",
    "href": "Hands-on_Exe/Hands-on_Ex_00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Load tidyverse into r environment by using the code chuck below.\n\npacman::p_load(tidyverse, psych)\n\nReading “read_csv” to create tibble dataframe"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_00.html#importing-data",
    "href": "Hands-on_Exe/Hands-on_Ex_00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing data",
    "text": "Importing data\n\nrealis_2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\nPivoting data\n\npopdata_fat&lt;-read_csv(\"data/PopData2019_fat.csv\")\n\n\npopdata_long &lt;- popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\nwrite_rds(popdata_long, \"data/rds/popdata_long.rds\")\n\n\nrealis2019_selected &lt;- realis_2019 %&gt;%\n  select(`Project Name`,\n  `Transacted Price ($)`,\n  `Property Type`)\nrealis2019_selected\n\n# A tibble: 19,515 × 3\n   `Project Name`           `Transacted Price ($)` `Property Type`    \n   &lt;chr&gt;                                     &lt;dbl&gt; &lt;chr&gt;              \n 1 PEIRCE VIEW                              840000 Condominium        \n 2 FLORIDA PARK                            3040000 Semi-Detached House\n 3 BULLION PARK                             860000 Condominium        \n 4 CASTLE GREEN                            1000000 Condominium        \n 5 HAPPY ESTATE                            7000000 Semi-Detached House\n 6 TEACHER'S HOUSING ESTATE                2880000 Terrace House      \n 7 THE PANORAMA                            1510000 Condominium        \n 8 THE PANORAMA                             710000 Condominium        \n 9 CHIP THYE GARDEN                        2800000 Terrace House      \n10 TEACHER'S HOUSING ESTATE                2300000 Terrace House      \n# ℹ 19,505 more rows\n\n\n\nrealis_2019_filtered &lt;- realis2019_selected %&gt;%\n  filter('Property Type'== \"Condominium\"|\n  'Property Type' == \"Apartment\") %&gt;% \n  filter('Type of Sales'== \"New Sales\") %&gt;%\n  filter('Unit Prfice ($ psm)'&lt;= 13000)\n\n\n\nPutting them together\n\nrealis_2019_filtered &lt;- realis_2019 %&gt;%\n  select(`Project Name`,\n  `Transacted Price ($)`,\n  `Property Type`) %&gt;%\n  filter('Property Type'== \"Condominium\"|\n  'Property Type' == \"Apartment\") %&gt;% \n  filter('Type of Sales'== \"New Sales\") %&gt;%\n  filter('Unit Prfice ($ psm)'&lt;= 13000)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "Loaded gridExtra library to display the charts side by side\n\npacman:: p_load(tidyverse, gridExtra )"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#loading-of-the-required-libraries",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#loading-of-the-required-libraries",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "Loaded gridExtra library to display the charts side by side\n\npacman:: p_load(tidyverse, gridExtra )"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#introducing-ggplot",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#introducing-ggplot",
    "title": "Hands-on Exercise 01",
    "section": "Introducing ggplot",
    "text": "Introducing ggplot\n\nexam_data &lt;-read_csv(\"data/Exam_data.csv\")\n\n\nR Graphics VS ggplot\n\npar(mfrow = c(1, 3))\n\nHis_maths &lt;- hist(exam_data$MATHS)\n\nHis_eng &lt;- hist(exam_data$ENGLISH)\n\nHis_Sci &lt;- hist(exam_data$SCIENCE)\n\n\n\n\n\n\n\n\n\n\nGrammar of Graphics\n\nggplot(data = exam_data)\n\n\n\n\n\n\n\n\nEssential Grammatical Elements in ggplot2: Aesthetic mappings\n\nggplot(data=exam_data, \n      aes(x=MATHS))"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 01",
    "section": "Essential Grammatical Elements in ggplot2: geom",
    "text": "Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual data marks being ploteed on the chat. Examples include:\n\n\n\nCopied from Prof Kam webpage: https://r4va.netlify.app/chap01#working-with-theme\n\n\nA plot must have at least one geom; there is no upper limit.\nYou can add a geom to a plot using the + operator. For complete list, please refer to here.\n\nGeometric Objects: geom_bar\n\nggplot(data=exam_data,\n       aes(x=RACE)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5,fill=\"red\")\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) + \n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL) \n\n\n\n\n\n\n\n## scale_y_continuous function is used to turn off the y-axis and the breaks = NULL is required to remove the inteval.\n\n\n\nGeoetirc Objects: geom_histogram ()\nPlotting histogram with bin set to 10, instad of using the default as 30.\n\nMaths_30 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS))+\n  geom_histogram()\n\nMaths_10 &lt;- ggplot(data=exam_data, \n       aes(x=MATHS))+\n  geom_histogram(binwidth=10)\n\ngrid.arrange(Maths_30, Maths_10, ncol=2)\n\n\n\n\n\n\n\n\n\n\nModifying a geometric object by changing aes ()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bin=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReference:\n\n\n\nEnter \"grDevices::colors()\"under console to find out the colours. \n\n\n\n\n\nGeometric Objects: geom-density()\nUsing of geom-density() to computes and plots kernel density estimate, which is a smoothed version of the histogram.\nThe application of kernel smoothing for probability density estimation, i.e., a non-parametric method to estimate the probability density\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() \n\n\n\n\n\n\n\n\nusing the same data as\n\nMaths_gender_den &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\nMaths_gender_Hist &lt;-ggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bin=20,\n                 color=\"grey30\")\n\ngrid.arrange(Maths_gender_den, Maths_gender_Hist, ncol=2)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_boxplot\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\nwith_jitter&lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\nno_jitter&lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)\n\n\ngrid.arrange(with_jitter, no_jitter, ncol=2)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 01",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe following Sections describe the show the statstictally transformation of data,\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\nfrequency of values of a variable (bar graph) a mean a confidence limit There are two ways to use these functions: add a stat_() function and override the default geom, or add a geom_() function and override the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#working-with-stat",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#working-with-stat",
    "title": "Hands-on Exercise 01",
    "section": "Working with stat()",
    "text": "Working with stat()\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",\n               size=4)     \n\n\n\n\n\n\n\n\n\nBest Fit curve on a scatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\nEssential Grammatical Elements in ggplot2: Facets"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#facet-wrap",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#facet-wrap",
    "title": "Hands-on Exercise 01",
    "section": "Facet wrap",
    "text": "Facet wrap\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\nfacet_grid() function\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nEssential Grammatical Elements in ggplot2: Coordinates\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the y- and x-axis range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Exe/Hands-on_Ex_01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 01",
    "section": "Essential Grammatical Elements in ggplot2: Themes",
    "text": "Essential Grammatical Elements in ggplot2: Themes\nThemes control elements of the graph not related to the data. such as background colour, size of fonts, gridlines colour of labels Built-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nPlotting with theme classic\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nplotting with theme minimal\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() # minimal effects\n\n\n\n\n\n\n\n\n\n\nPlotting with theme bw\n\nggplot (data=exam_data, \n        aes(x=RACE))+\n  geom_bar()+\n  coord_flip() +\n  theme_bw() +\n  ggtitle(\"Distribution of Races in Exam Data\")"
  },
  {
    "objectID": "In-class_Exe/In-class_Ex_01.html",
    "href": "In-class_Exe/In-class_Ex_01.html",
    "title": "In-Class Exercise 01",
    "section": "",
    "text": "pacman:: p_load (tidyverse)"
  },
  {
    "objectID": "In-class_Exe/In-class_Ex_01.html#loading-of-libraries",
    "href": "In-class_Exe/In-class_Ex_01.html#loading-of-libraries",
    "title": "In-Class Exercise 01",
    "section": "",
    "text": "pacman:: p_load (tidyverse)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_02.html",
    "href": "Hands-on_Exe/Hands-on_Ex_02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In this hands-one exercise, 6 R packages are used. Beside tidyverse which were used in Hands-on Exercise 1 and dplyr which is used to transform the dataframe to create meaningful label. The following packages are introduced.\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, gridExtra, dplyr \n               ) \n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_02.html#loading-of-the-required-libraries",
    "href": "Hands-on_Exe/Hands-on_Ex_02.html#loading-of-the-required-libraries",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In this hands-one exercise, 6 R packages are used. Beside tidyverse which were used in Hands-on Exercise 1 and dplyr which is used to transform the dataframe to create meaningful label. The following packages are introduced.\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, gridExtra, dplyr \n               ) \n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Exe/Hands-on_Ex_02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 02",
    "section": "Beyond ggplot2 Annotation: ggrepel",
    "text": "Beyond ggplot2 Annotation: ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nData preparation for label and data to be plotted.\nTo make the above chart more meaningful, the following codes is to prepare the label so that the target audience of the chart could easily view the student IDs and the gender who scored higher for English and Chinese.\nIn this scenario, we are interested in students who scored above 80 for both subjects.\n\nexam_data &lt;- exam_data %&gt;%\n  mutate(ID_label=gsub(\"Student\", \"s_\",ID),\n         Gender_label= recode(GENDER, \"Female\"=\"F\", \"Male\" =\"M\"),\n         Label=str_c(ID_label,Gender_label,sep=\"\"))\n\nfiltered_data &lt;- exam_data %&gt;%\n  filter(MATHS &gt; 80, ENGLISH &gt; 80)\n\n\nggplot(data = filtered_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              size = 1) +  \n  geom_label(aes(label = Label, fill = GENDER,), \n             hjust = 0.1, \n             vjust = -0.1) +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"lightblue\")) +\n  coord_cartesian(xlim = c(80, 100),\n                  ylim = c(80, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3 for students above 80 \")+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\nWorking with ggrepel\nPlotting of the best fit line with outliners being labelled.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Exe/Hands-on_Ex_02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 02",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\ntheme_gray()\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\nWorking with ggtheme package: theme_economist()\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\nWorking with hrbthems package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_02.html#beyond-single-graph",
    "href": "Hands-on_Exe/Hands-on_Ex_02.html#beyond-single-graph",
    "title": "Hands-on Exercise 02",
    "section": "Beyond Single Graph",
    "text": "Beyond Single Graph\nWhen crafting the data story, it is common to represent the different dimensions of the data using multiple graphs and displaying them on the same page/slide to better illustrate and support the trends and observations.\nThis can be done using using function such as grid.arrange of the gridEXtra package (as used in Hands-on Exercise 1) and plot_grid() of cowplot package.\nIn this section, we will be using ggplot2 extension called pactchwork which is designed for combining seperate ggplot charts into one single image.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nUse of grid.arrange in gridExtra package\n\ngrid.arrange(p1,p2, p3, ncol=3)\n\n\n\n\n\n\n\n\n\n\nCreating Composite Graphics: pathwork methods\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\nCombining three ggplot2 graphs\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\nCreating figure with insert\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\nThe inset element can be modified to be at the bottom too by adjusting the numbers in the function. But it is important to take note that the insert chart should not cover any points of the graph.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.01, \n                   right = 0.5, \n                   top = 0.3)\n\n\n\n\n\n\n\n\n\n\nCreating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "The learning outcome of this exercise is to learn how to create interactive data visualistaion by using functions in ggiraph and plotlyr packages. The material of this page is referred to Prof Kam’s webpage allocated for Hands-on Exercise 03.\n\n\n\nggiraph package makes ‘ggplot’ graphics interactive.\nplotly is for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse is part of the family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork is for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip (data label): a column of data-sets that contain tooltips or data label to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements. If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\nRefer to this article for more detail explanation.\n\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomisation of Tooltips\n\n\n\nIf the desired Tool Tips or Data labels consisted of multiple fields, they can be customised using a few lines of codes with formatting so it will be shown up according to desired.\n\n\n\n# Cutomisation of Tooltips\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\" \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css))\n)                     \n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNoted that in the code argument, ” data_id= CLASS” so that students in the same class are being highlighted. In the earlier example, “tooltips = ID” is used to the student ID will be shown.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)\n\n\n\n\n\nStyling hover effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)          \n\n\n\n\n\nDifferent from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)             \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below plotted the exam data for Maths and science in a scatter plot. Data points/ students in the same CLASS will be highlighted upon mouse over. At the same time, the tooltip will show the student and Class highlighted the students from the same class. The gender are plotted in different colours to allow viewers to make quick sense of data maths and science and maths scores in each class and if there are any gaps in gender.\nBased on the data below, it is observed that students from 3A has higher score in Maths and Science compared to students from class 3I.\n\n\n\ngg_scatter &lt;- ggplot(\n  data = exam_data,\n  mapping = aes(\n    x = MATHS, y = SCIENCE, color = GENDER,\n    # here we add iteractive aesthetics\n    tooltip = exam_data$tooltip, data_id = CLASS #using the tooltip or data label derived earlier part of the Hands-on Exercise\n  )) + geom_point_interactive(\n    size = 3, hover_nearest = TRUE)\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"yellow\", secondary = \"red\")\n\nset_girafe_defaults(\n  opts_hover = opts_hover(css = css_default_hover),\n  opts_zoom = opts_zoom(min = 1, max =200 ),\n  opts_tooltip = opts_tooltip(css = \"padding:3px;background-color:#333333;color:white;\"),\n  opts_sizing = opts_sizing(rescale = TRUE),\n  opts_toolbar = opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n)\ngirafe(ggobj = gg_scatter)\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618) \n\n\n\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualization below\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(), and by using ggplotly()\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~GENDER)\n\n\n\n\n\n####creating an interactive scatter plot: ggplotly() method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nInteractive Data Table: DT package A wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n \ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html#programming-interactive-data-visualisation-with-r",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html#programming-interactive-data-visualisation-with-r",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "The learning outcome of this exercise is to learn how to create interactive data visualistaion by using functions in ggiraph and plotlyr packages. The material of this page is referred to Prof Kam’s webpage allocated for Hands-on Exercise 03.\n\n\n\nggiraph package makes ‘ggplot’ graphics interactive.\nplotly is for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse is part of the family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork is for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip (data label): a column of data-sets that contain tooltips or data label to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements. If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\nRefer to this article for more detail explanation.\n\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html#by-hovering-the-mouse-pointer-on-an-data-point-of-interest-the-students-id-and-class-will-be-displayed.",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html#by-hovering-the-mouse-pointer-on-an-data-point-of-interest-the-students-id-and-class-will-be-displayed.",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Customisation of Tooltips\n\n\n\nIf the desired Tool Tips or Data labels consisted of multiple fields, they can be customised using a few lines of codes with formatting so it will be shown up according to desired.\n\n\n\n# Cutomisation of Tooltips\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\" \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css))\n)                     \n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNoted that in the code argument, ” data_id= CLASS” so that students in the same class are being highlighted. In the earlier example, “tooltips = ID” is used to the student ID will be shown.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)\n\n\n\n\n\nStyling hover effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)          \n\n\n\n\n\nDifferent from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)             \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below plotted the exam data for Maths and science in a scatter plot. Data points/ students in the same CLASS will be highlighted upon mouse over. At the same time, the tooltip will show the student and Class highlighted the students from the same class. The gender are plotted in different colours to allow viewers to make quick sense of data maths and science and maths scores in each class and if there are any gaps in gender.\nBased on the data below, it is observed that students from 3A has higher score in Maths and Science compared to students from class 3I.\n\n\n\ngg_scatter &lt;- ggplot(\n  data = exam_data,\n  mapping = aes(\n    x = MATHS, y = SCIENCE, color = GENDER,\n    # here we add iteractive aesthetics\n    tooltip = exam_data$tooltip, data_id = CLASS #using the tooltip or data label derived earlier part of the Hands-on Exercise\n  )) + geom_point_interactive(\n    size = 3, hover_nearest = TRUE)\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"yellow\", secondary = \"red\")\n\nset_girafe_defaults(\n  opts_hover = opts_hover(css = css_default_hover),\n  opts_zoom = opts_zoom(min = 1, max =200 ),\n  opts_tooltip = opts_tooltip(css = \"padding:3px;background-color:#333333;color:white;\"),\n  opts_sizing = opts_sizing(rescale = TRUE),\n  opts_toolbar = opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n)\ngirafe(ggobj = gg_scatter)\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618) \n\n\n\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualization below\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(), and by using ggplotly()\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~GENDER)\n\n\n\n\n\n####creating an interactive scatter plot: ggplotly() method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\nInteractive Data Table: DT package A wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n \ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html#programming-animated-statistical-graphics-with-r",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html#programming-animated-statistical-graphics-with-r",
    "title": "Hands-on_Ex03",
    "section": "Programming Animated Statistical Graphics with R",
    "text": "Programming Animated Statistical Graphics with R\nThe 2nd part of the exercise is use animated graphic to attract the interest of the viewer and leave a deeper impression as compared to the static charts and graphs.\n\nLoading the R packages\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on_Ex03",
    "section": "Animated Data Visualisation: gganimate methods",
    "text": "Animated Data Visualisation: gganimate methods\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html#building-the-animated-bubble-plot",
    "title": "Hands-on_Ex03",
    "section": "Building the animated bubble plot",
    "text": "Building the animated bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear') \n\n\n\n\n\n\n\n\n\nAnimated Data Visualisation: plotly\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_03.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Exe/Hands-on_Ex_03.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on_Ex03",
    "section": "Building an animated bubble plot: plot_ly() method",
    "text": "Building an animated bubble plot: plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_04.html",
    "href": "Hands-on_Exe/Hands-on_Ex_04.html",
    "title": "Hands-On Exercise 04",
    "section": "",
    "text": "Visualising distribution is the first steps to understand and analyse the assigned data set,\n\n\nIn this Hands-on, we will be using the following packages:\n\nggdist: to plot ridglines, which will be useful to see the distribution across another dimension, such as changes in scores across Class.\nggthemes: for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, gridExtra)\n\n\n\n\nThe same dataset exam data is being used for this exercise, as previously.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that in general 3A has the highest English score for when compared to other classes.\n\n\n\n\n\nCode for visualising English scores using geom_ridgeline_gradient(),\nThis function may not be useful and it may create confusion among the viewers.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nVisualising the Maths scores.\n\nggplot(exam, \n       aes(x = MATHS, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"Maths grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\necdf refers to the empirical; cumulative distribution. This is alternatives to visualise distribution and it could handle with continuous and categorical variables. the downside of this is that it will requires more training to accurately interpret.\nFor the could chunk below put the two charts side by side for easy visualization.\n\nECDF &lt;- ggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n \nEnglish &lt;- ggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\ngrid.arrange(English, ECDF, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nThe probability is the highest at peak or the center of the the charts,\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20, ## syntax for boxplot.\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = GENDER, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n2 &lt;- a + facet_grid(class())"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_04.html#visualising-distribution",
    "href": "Hands-on_Exe/Hands-on_Ex_04.html#visualising-distribution",
    "title": "Hands-On Exercise 04",
    "section": "",
    "text": "Visualising distribution is the first steps to understand and analyse the assigned data set,\n\n\nIn this Hands-on, we will be using the following packages:\n\nggdist: to plot ridglines, which will be useful to see the distribution across another dimension, such as changes in scores across Class.\nggthemes: for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, gridExtra)\n\n\n\n\nThe same dataset exam data is being used for this exercise, as previously.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe can see that in general 3A has the highest English score for when compared to other classes.\n\n\n\n\n\nCode for visualising English scores using geom_ridgeline_gradient(),\nThis function may not be useful and it may create confusion among the viewers.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nVisualising the Maths scores.\n\nggplot(exam, \n       aes(x = MATHS, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"Maths grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\necdf refers to the empirical; cumulative distribution. This is alternatives to visualise distribution and it could handle with continuous and categorical variables. the downside of this is that it will requires more training to accurately interpret.\nFor the could chunk below put the two charts side by side for easy visualization.\n\nECDF &lt;- ggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n \nEnglish &lt;- ggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\ngrid.arrange(English, ECDF, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nThe probability is the highest at peak or the center of the the charts,\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20, ## syntax for boxplot.\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = GENDER, \n           y = MATHS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n2 &lt;- a + facet_grid(class())"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_04.html#visual-statistical-analysis",
    "href": "Hands-on_Exe/Hands-on_Ex_04.html#visual-statistical-analysis",
    "title": "Hands-On Exercise 04",
    "section": "4.2 Visual Statistical Analysis",
    "text": "4.2 Visual Statistical Analysis\n\nLoading of libraries and packages\ntidyverse is loaded for this exercise.\n\npacman::p_load(ggstatsplot)\n\nOne-sample test: gghistostats() method\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nTwo-sample mean test: ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nOneway ANOVA Test: ggbetweenstats() method\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Depedence) : ggbarstats() methods\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\nVisualising Models\n\npacman::p_load(readxl, performance, parameters, see)\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_04.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Exe/Hands-on_Ex_04.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-On Exercise 04",
    "section": "Model Diagnostic: checking for multicolinearity:",
    "text": "Model Diagnostic: checking for multicolinearity:\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n::: callout note There are two variables with high collinearity Age_08_04 and Mfg_Year. :::\n\nModel Diagnostic: checking normality assumption\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\n\n check_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_04.html#visualising-uncertainty",
    "href": "Hands-on_Exe/Hands-on_Ex_04.html#visualising-uncertainty",
    "title": "Hands-On Exercise 04",
    "section": "4.3 Visualising Uncertainty",
    "text": "4.3 Visualising Uncertainty\n\nLoading of Libraries\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\nLoading of Exam data\nAs the exam data has been loaded previously, there is no need to reload it the current exercise.\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nPlotting standard error bars of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nPlotting confidence interval of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty: ggdist package\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\nMean Point with 95% and 99% interval respectively.\n\nexam_mean_95 &lt;- exam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Mean Point + 95% Multiple-interval plot\")\n\n\nexam_mean_99 &lt;- exam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.99) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Mean Point + 99 % Multiple-interval plot\")\n\n\n\ngrid.arrange(exam_mean_95, exam_mean_99, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(\n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\nonly showing 95% confidencen Interval\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",\n    .width = 0.95,\n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Exe/Hands-on_Ex_04.html#funnel-plots-for-fair-comparisons",
    "href": "Hands-on_Exe/Hands-on_Ex_04.html#funnel-plots-for-fair-comparisons",
    "title": "Hands-On Exercise 04",
    "section": "4.4 Funnel Plots for Fair Comparisons",
    "text": "4.4 Funnel Plots for Fair Comparisons\n\nLoading of R packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #change in x axis range\n  yrange = c(0, 0.05),   #change in y axis range\n  title = 'Funnel plot using data_type = PR'\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  xrange = c(0, 6500),  #&lt;&lt; limiting the X axis range\n  yrange = c(0, 0.05),  #&lt;&lt; limiting the Y axis range\n  title = 'Funnel plot using data_type = SR'\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnel Plot for Fair Visual Comparison: ggplot2 methods\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlotting a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\nInteractive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Take-home_Exe/Take-home_Ex_01.html",
    "href": "Take-home_Exe/Take-home_Ex_01.html",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, gridExtra)\n\n\n\n\n\nheart &lt;- read_csv(\"data/Ex01/japan_heart_attack_dataset.csv\")\n\n\n\n\nHA &lt;- heart %&gt;% select (1:17)\n\n\nsummary(HA)\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence\n Length:30000           \n Class :character       \n Mode  :character       \n                        \n                        \n                        \n\n\n\n#Assuming HA is your tibble data frame\n# Select only the categorical columns (factor or character)\ncategorical_columns &lt;- HA %&gt;% select(where(~is.character(.x) || is.factor(.x)))\n\n# Count the number of occurrences for each unique value in each categorical column\ncount_occurrences &lt;- categorical_columns %&gt;%\n  pivot_longer(everything(), names_to = \"Category\", values_to = \"Value\") %&gt;%\n  count(Category, Value)\n\n# Print the result\nprint(count_occurrences)\n\n# A tibble: 24 × 3\n   Category            Value        n\n   &lt;chr&gt;               &lt;chr&gt;    &lt;int&gt;\n 1 Alcohol_Consumption High      5828\n 2 Alcohol_Consumption Low       9098\n 3 Alcohol_Consumption Moderate 12059\n 4 Alcohol_Consumption None      3015\n 5 Diabetes_History    No       23903\n 6 Diabetes_History    Yes       6097\n 7 Diet_Quality        Average  11971\n 8 Diet_Quality        Good     12006\n 9 Diet_Quality        Poor      6023\n10 Family_History      No       21064\n# ℹ 14 more rows\n\n\n\n# Create bar plots for each categorical field\nbar_plots &lt;- count_occurrences %&gt;%\n  ggplot(aes(x = Value, y = n, fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~ Category, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Counts of Unique Values in Categorical Fields\",\n       x = \"Unique Values\",\n       y = \"Count\")\n\n# Print the bar plots\nprint(bar_plots)\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Select only the continuous columns (numeric)\ncontinuous_columns &lt;- HA %&gt;% select(where(is.numeric))\n\n# Create histograms for each continuous field\nhistograms &lt;- continuous_columns %&gt;%\n  pivot_longer(everything(), names_to = \"Field\", values_to = \"Value\") %&gt;%\n  ggplot(aes(x = Value, fill = Field)) +\n  geom_histogram(binwidth = 30, alpha = 0.7) +\n  facet_wrap(~ Field, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Histograms of Continuous Fields\",\n       x = \"Value\",\n       y = \"Frequency\")\n\n# Print the histograms\nprint(histograms)\n\n\n\n\n\n\n\n\n\ncontinuous_columns &lt;- HA %&gt;% select(where(is.numeric))\n# Create individual boxplots for each continuous field\nindividual_boxplots &lt;- continuous_columns %&gt;%\n  pivot_longer(everything(), names_to = \"Field\", values_to = \"Value\") %&gt;%\n  ggplot(aes(x = Field, y = Value, fill = Field)) +\n  geom_boxplot() +\n  facet_wrap(~ Field, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Boxplots of Continuous Fields\",\n       x = \"Field\",\n       y = \"Value\")\n\n# Print the individual boxplots\nprint(individual_boxplots)"
  },
  {
    "objectID": "Take-home_Exe/Take-home_Ex_01.html#loading-of-packages",
    "href": "Take-home_Exe/Take-home_Ex_01.html#loading-of-packages",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, gridExtra)"
  },
  {
    "objectID": "Take-home_Exe/Take-home_Ex_01.html#loading-of-data",
    "href": "Take-home_Exe/Take-home_Ex_01.html#loading-of-data",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "heart &lt;- read_csv(\"data/Ex01/japan_heart_attack_dataset.csv\")\n\n\n\n\nHA &lt;- heart %&gt;% select (1:17)\n\n\nsummary(HA)\n\n      Age           Gender             Region          Smoking_History   \n Min.   :18.00   Length:30000       Length:30000       Length:30000      \n 1st Qu.:33.00   Class :character   Class :character   Class :character  \n Median :48.00   Mode  :character   Mode  :character   Mode  :character  \n Mean   :48.49                                                           \n 3rd Qu.:64.00                                                           \n Max.   :79.00                                                           \n Diabetes_History   Hypertension_History Cholesterol_Level Physical_Activity \n Length:30000       Length:30000         Min.   : 80.02    Length:30000      \n Class :character   Class :character     1st Qu.:179.55    Class :character  \n Mode  :character   Mode  :character     Median :199.77    Mode  :character  \n                                         Mean   :199.90                      \n                                         3rd Qu.:220.16                      \n                                         Max.   :336.86                      \n Diet_Quality       Alcohol_Consumption Stress_Levels         BMI       \n Length:30000       Length:30000        Min.   : 0.000   Min.   : 5.58  \n Class :character   Class :character    1st Qu.: 3.644   1st Qu.:21.63  \n Mode  :character   Mode  :character    Median : 4.993   Median :24.96  \n                                        Mean   : 5.002   Mean   :25.00  \n                                        3rd Qu.: 6.353   3rd Qu.:28.36  \n                                        Max.   :10.000   Max.   :46.10  \n   Heart_Rate      Systolic_BP      Diastolic_BP    Family_History    \n Min.   : 30.03   Min.   : 56.23   Min.   : 39.95   Length:30000      \n 1st Qu.: 63.25   1st Qu.:109.79   1st Qu.: 73.26   Class :character  \n Median : 69.95   Median :119.90   Median : 80.12   Mode  :character  \n Mean   : 69.98   Mean   :119.91   Mean   : 80.03                     \n 3rd Qu.: 76.66   3rd Qu.:130.02   3rd Qu.: 86.76                     \n Max.   :108.78   Max.   :178.77   Max.   :117.67                     \n Heart_Attack_Occurrence\n Length:30000           \n Class :character       \n Mode  :character       \n                        \n                        \n                        \n\n\n\n#Assuming HA is your tibble data frame\n# Select only the categorical columns (factor or character)\ncategorical_columns &lt;- HA %&gt;% select(where(~is.character(.x) || is.factor(.x)))\n\n# Count the number of occurrences for each unique value in each categorical column\ncount_occurrences &lt;- categorical_columns %&gt;%\n  pivot_longer(everything(), names_to = \"Category\", values_to = \"Value\") %&gt;%\n  count(Category, Value)\n\n# Print the result\nprint(count_occurrences)\n\n# A tibble: 24 × 3\n   Category            Value        n\n   &lt;chr&gt;               &lt;chr&gt;    &lt;int&gt;\n 1 Alcohol_Consumption High      5828\n 2 Alcohol_Consumption Low       9098\n 3 Alcohol_Consumption Moderate 12059\n 4 Alcohol_Consumption None      3015\n 5 Diabetes_History    No       23903\n 6 Diabetes_History    Yes       6097\n 7 Diet_Quality        Average  11971\n 8 Diet_Quality        Good     12006\n 9 Diet_Quality        Poor      6023\n10 Family_History      No       21064\n# ℹ 14 more rows\n\n\n\n# Create bar plots for each categorical field\nbar_plots &lt;- count_occurrences %&gt;%\n  ggplot(aes(x = Value, y = n, fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~ Category, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Counts of Unique Values in Categorical Fields\",\n       x = \"Unique Values\",\n       y = \"Count\")\n\n# Print the bar plots\nprint(bar_plots)"
  },
  {
    "objectID": "Take-home_Exe/Take-home_Ex_01.html#visualising-continuous-data",
    "href": "Take-home_Exe/Take-home_Ex_01.html#visualising-continuous-data",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "# Select only the continuous columns (numeric)\ncontinuous_columns &lt;- HA %&gt;% select(where(is.numeric))\n\n# Create histograms for each continuous field\nhistograms &lt;- continuous_columns %&gt;%\n  pivot_longer(everything(), names_to = \"Field\", values_to = \"Value\") %&gt;%\n  ggplot(aes(x = Value, fill = Field)) +\n  geom_histogram(binwidth = 30, alpha = 0.7) +\n  facet_wrap(~ Field, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Histograms of Continuous Fields\",\n       x = \"Value\",\n       y = \"Frequency\")\n\n# Print the histograms\nprint(histograms)\n\n\n\n\n\n\n\n\n\ncontinuous_columns &lt;- HA %&gt;% select(where(is.numeric))\n# Create individual boxplots for each continuous field\nindividual_boxplots &lt;- continuous_columns %&gt;%\n  pivot_longer(everything(), names_to = \"Field\", values_to = \"Value\") %&gt;%\n  ggplot(aes(x = Field, y = Value, fill = Field)) +\n  geom_boxplot() +\n  facet_wrap(~ Field, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Boxplots of Continuous Fields\",\n       x = \"Field\",\n       y = \"Value\")\n\n# Print the individual boxplots\nprint(individual_boxplots)"
  }
]